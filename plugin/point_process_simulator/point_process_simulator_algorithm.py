# -*- coding: utf-8 -*-

"""
/***************************************************************************
 PointProcessSimulator
                                 A QGIS plugin
 Estimates the intensity of a point process (via kernel density estimation) and resimulates an inhomogeneous Poisson-process according to this intensity.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-27
        copyright            : (C) 2020 by Mathias Weiße
        email                : weisse.m@posteo.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Mathias Weiße'
__date__ = '2020-02-27'
__copyright__ = '(C) 2020 by Mathias Weiße'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'
import sys
import os
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterFeatureSink,
                       QgsField,QgsFields,QgsPointXY,QgsFeature,QgsGeometry)
from PyQt5.QtCore import *
from osgeo import gdal, osr
from shapely.geometry import *
import numpy as np
sys.path.append(os.path.dirname(os.path.realpath(__file__)))
import Pointprocess as PP


class PointProcessSimulatorAlgorithm(QgsProcessingAlgorithm):
    """

    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INTENSITY = 'INTENSITY'
    OUTPUTPOINTS='OUTPUTPOINTS'
    INPUTPOINTS = 'INPUTPOINTS'
    INPUTREGION='INPUTREGION'
    NROFSIMS='NROFSIMS'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and outputs of the algorithm, along
        with some other properties.
        """

        #input: sample points
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUTPOINTS,
                self.tr('Input point samples'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        #input: region
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUTREGION,
                self.tr('Input region'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        #input: number of simulations
        self.addParameter(
            QgsProcessingParameterNumber(self.NROFSIMS,self.tr('Number of simulations'))
        )


        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.INTENSITY,
                self.tr('Estimated intensity')
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUTPOINTS,
                self.tr('Simulated Points (only add if <Number of simulations> is greater than 0)'),
                QgsProcessing.TypeVectorPoint
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        points = self.parameterAsSource(parameters, self.INPUTPOINTS, context)
        region = self.parameterAsSource(parameters, self.INPUTREGION, context)
        nrOfSim=self.parameterAsInt(parameters,self.NROFSIMS,context)

        if(nrOfSim>0):
            fields=QgsFields()
            fields.append(QgsField('simulation_nr',QVariant.Int))
            (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUTPOINTS,
                    context, fields, points.wkbType(), points.sourceCrs())
        fp=self.parameterAsOutputLayer(parameters,self.INTENSITY,context)

        pointFeatures=points.getFeatures()
        regionFeatures=region.getFeatures()

        shplyPoints=MultiPoint([Point(p.geometry().asPoint().x(),p.geometry().asPoint().y()) for p in pointFeatures])
        shplyRegion=[r.geometry().asMultiPolygon() for r in regionFeatures][0][0]

        shplyRegion=Polygon([(p.x(),p.y()) for p in shplyRegion[0]])

        PPP=PP.PoissonProcess(S=[shplyPoints], region=shplyRegion)
        PPP.kernelIntensity(setIntensity=True)

        xm=PPP.minBox[0]
        ym=PPP.minBox[1]
        xM=PPP.minBox[2]
        yM=PPP.minBox[3]

        X,Y=np.meshgrid(np.linspace(xm,xM,100),np.linspace(yM,ym,100))
        intensityArray=PPP.intFunc(X,Y)

        driver = gdal.GetDriverByName('GTiff')
        raster = driver.Create(fp, xsize=100, ysize=100, bands=1, eType=gdal.GDT_Float32)

        raster.GetRasterBand(1).WriteArray(intensityArray)
        raster.SetGeoTransform([xm,0.01*(xM-xm),0,yM,0,-0.01*(yM-ym)])

        srs = osr.SpatialReference()
        srs.SetWellKnownGeogCS(points.sourceCrs().description())
        raster.SetProjection(srs.ExportToWkt())

        raster = None




        for n in range(nrOfSim):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

            simulatedPP=PPP.simPPP()

            for p in simulatedPP:
                feature=QgsFeature()
                feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(p.x,p.y)))
                feature.setAttributes([n])
                sink.addFeature(feature, QgsFeatureSink.FastInsert)


        D={self.INTENSITY: fp}
        if(nrOfSim>0):
            D.update({self.OUTPUTPOINTS: dest_id})

        return D

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'PP: Estimate and Resimulate'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return PointProcessSimulatorAlgorithm()
